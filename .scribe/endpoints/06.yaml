name: 'Product management'
description: |-

  APIs for managing products
endpoints:
  -
    httpMethods:
      - POST
    uri: 'api/{account}/store/validateProductOrder'
    metadata:
      groupName: 'Product management'
      groupDescription: |-

        APIs for managing products
      subgroup: ''
      subgroupDescription: ''
      title: ''
      description: ''
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      account:
        name: account
        description: ''
        required: true
        example: consequatur
        type: string
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
    cleanUrlParameters:
      account: consequatur
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - GET
    uri: 'api/{account}/manager/product'
    metadata:
      groupName: 'Product management'
      groupDescription: |-

        APIs for managing products
      subgroup: ''
      subgroupDescription: ''
      title: 'Display a listing of products.'
      description: 'Get a paginated list of all products.'
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      account:
        name: account
        description: ''
        required: true
        example: consequatur
        type: string
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
    cleanUrlParameters:
      account: consequatur
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      page:
        name: page
        description: 'The page number for pagination.'
        required: false
        example: 0
        type: integer
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      limit:
        name: limit
        description: 'The number of items per page (1-100).'
        required: false
        example: 10
        type: integer
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      filter:
        name: filter
        description: 'Filter products by name.'
        required: false
        example: '"Phoenix"'
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      sorting:
        name: sorting
        description: 'Sort products by column and direction (column:direction).'
        required: false
        example: '"created_at:desc"'
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      parent_id:
        name: parent_id
        description: 'Filter products by parent ID.'
        required: false
        example: 1
        type: integer
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanBodyParameters:
      page: 0
      limit: 10
      filter: '"Phoenix"'
      sorting: '"created_at:desc"'
      parent_id: 1
    fileParameters: []
    responses:
      -
        status: 401
        content: '{"message":"Unauthenticated."}'
        headers:
          cache-control: 'no-cache, private'
          content-type: application/json
          vary: Origin
        description: null
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: 'api/{account}/manager/product'
    metadata:
      groupName: 'Product management'
      groupDescription: |-

        APIs for managing products
      subgroup: ''
      subgroupDescription: ''
      title: 'Store a newly created product.'
      description: 'Create a new product with the provided data.'
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      account:
        name: account
        description: ''
        required: true
        example: consequatur
        type: string
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
    cleanUrlParameters:
      account: consequatur
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      name:
        name: name
        description: 'The name of the product.'
        required: true
        example: '"Gold Pack"'
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      short_description:
        name: short_description
        description: 'The short description of the product.'
        required: false
        example: '"A pack of gold coins"'
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      description:
        name: description
        description: 'The detailed description of the product.'
        required: false
        example: '"This pack contains 1000 gold coins"'
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      image:
        name: image
        description: 'The image URL of the product.'
        required: false
        example: '"https://example.com/gold-pack.jpg"'
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      price_fiat:
        name: price_fiat
        description: 'The price in fiat currency.'
        required: false
        example: '"9.99"'
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      price_oro:
        name: price_oro
        description: 'The price in oro currency.'
        required: false
        example: 500
        type: integer
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      price_plumas:
        name: price_plumas
        description: 'The price in plumas currency.'
        required: false
        example: 100
        type: integer
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      active:
        name: active
        description: 'Whether the product is active (0 or 1).'
        required: false
        example: 1
        type: integer
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      product_parent_id:
        name: product_parent_id
        description: 'The ID of the parent product.'
        required: false
        example: 1
        type: integer
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      oro:
        name: oro
        description: 'The amount of oro included in the product.'
        required: false
        example: 1000
        type: integer
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      plumas:
        name: plumas
        description: 'The amount of plumas included in the product.'
        required: false
        example: 200
        type: integer
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      nft_id:
        name: nft_id
        description: 'The ID of the NFT included in the product.'
        required: false
        example: 5
        type: integer
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      rarity:
        name: rarity
        description: 'The rarity of the NFT included in the product.'
        required: false
        example: '"Legendary"'
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      tags:
        name: tags
        description: 'Tags for the product.'
        required: false
        example: '"gold,premium"'
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      nft_serial_greater_equal:
        name: nft_serial_greater_equal
        description: 'The minimum NFT serial number.'
        required: false
        example: 1
        type: integer
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      nft_serial_less_equal:
        name: nft_serial_less_equal
        description: 'The maximum NFT serial number.'
        required: false
        example: 100
        type: integer
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      custom:
        name: custom
        description: 'Custom information for the product.'
        required: false
        example: '"Pase de temporada premium"'
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      one_time_purchase:
        name: one_time_purchase
        description: 'Whether the product can only be purchased once per user (0 or 1).'
        required: false
        example: 1
        type: integer
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      one_time_purchase_global:
        name: one_time_purchase_global
        description: 'Whether the product can only be purchased once globally (0 or 1).'
        required: false
        example: 0
        type: integer
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanBodyParameters:
      name: '"Gold Pack"'
      short_description: '"A pack of gold coins"'
      description: '"This pack contains 1000 gold coins"'
      image: '"https://example.com/gold-pack.jpg"'
      price_fiat: '"9.99"'
      price_oro: 500
      price_plumas: 100
      active: 1
      product_parent_id: 1
      oro: 1000
      plumas: 200
      nft_id: 5
      rarity: '"Legendary"'
      tags: '"gold,premium"'
      nft_serial_greater_equal: 1
      nft_serial_less_equal: 100
      custom: '"Pase de temporada premium"'
      one_time_purchase: 1
      one_time_purchase_global: 0
    fileParameters: []
    responses: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - GET
    uri: 'api/{account}/manager/product/{id}'
    metadata:
      groupName: 'Product management'
      groupDescription: |-

        APIs for managing products
      subgroup: ''
      subgroupDescription: ''
      title: 'Display the specified product.'
      description: 'Get details of a specific product by ID.'
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      account:
        name: account
        description: ''
        required: true
        example: consequatur
        type: string
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
      id:
        name: id
        description: 'The ID of the product.'
        required: true
        example: consequatur
        type: string
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
    cleanUrlParameters:
      account: consequatur
      id: consequatur
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 401
        content: '{"message":"Unauthenticated."}'
        headers:
          cache-control: 'no-cache, private'
          content-type: application/json
          vary: Origin
        description: null
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - PUT
      - PATCH
    uri: 'api/{account}/manager/product/{id}'
    metadata:
      groupName: 'Product management'
      groupDescription: |-

        APIs for managing products
      subgroup: ''
      subgroupDescription: ''
      title: 'Update the specified product.'
      description: 'Update an existing product with the provided data.'
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      account:
        name: account
        description: ''
        required: true
        example: consequatur
        type: string
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
      id:
        name: id
        description: 'The ID of the product.'
        required: true
        example: consequatur
        type: string
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
    cleanUrlParameters:
      account: consequatur
      id: consequatur
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      name:
        name: name
        description: 'The name of the product.'
        required: true
        example: '"Gold Pack"'
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      short_description:
        name: short_description
        description: 'The short description of the product.'
        required: false
        example: '"A pack of gold coins"'
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      description:
        name: description
        description: 'The detailed description of the product.'
        required: false
        example: '"This pack contains 1000 gold coins"'
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      image:
        name: image
        description: 'The image URL of the product.'
        required: false
        example: '"https://example.com/gold-pack.jpg"'
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      price_fiat:
        name: price_fiat
        description: 'The price in fiat currency.'
        required: false
        example: '"9.99"'
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      price_oro:
        name: price_oro
        description: 'The price in oro currency.'
        required: false
        example: 500
        type: integer
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      price_plumas:
        name: price_plumas
        description: 'The price in plumas currency.'
        required: false
        example: 100
        type: integer
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      active:
        name: active
        description: 'Whether the product is active (0 or 1).'
        required: false
        example: 1
        type: integer
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      product_parent_id:
        name: product_parent_id
        description: 'The ID of the parent product.'
        required: false
        example: 1
        type: integer
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      oro:
        name: oro
        description: 'The amount of oro included in the product.'
        required: false
        example: 1000
        type: integer
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      plumas:
        name: plumas
        description: 'The amount of plumas included in the product.'
        required: false
        example: 200
        type: integer
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      nft_id:
        name: nft_id
        description: 'The ID of the NFT included in the product.'
        required: false
        example: 5
        type: integer
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      rarity:
        name: rarity
        description: 'The rarity of the NFT included in the product.'
        required: false
        example: '"Legendary"'
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      tags:
        name: tags
        description: 'Tags for the product.'
        required: false
        example: '"gold,premium"'
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      nft_serial_greater_equal:
        name: nft_serial_greater_equal
        description: 'The minimum NFT serial number.'
        required: false
        example: 1
        type: integer
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      nft_serial_less_equal:
        name: nft_serial_less_equal
        description: 'The maximum NFT serial number.'
        required: false
        example: 100
        type: integer
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      custom:
        name: custom
        description: 'Custom information for the product.'
        required: false
        example: '"Pase de temporada premium"'
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      one_time_purchase:
        name: one_time_purchase
        description: 'Whether the product can only be purchased once per user (0 or 1).'
        required: false
        example: 1
        type: integer
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      one_time_purchase_global:
        name: one_time_purchase_global
        description: 'Whether the product can only be purchased once globally (0 or 1).'
        required: false
        example: 0
        type: integer
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanBodyParameters:
      name: '"Gold Pack"'
      short_description: '"A pack of gold coins"'
      description: '"This pack contains 1000 gold coins"'
      image: '"https://example.com/gold-pack.jpg"'
      price_fiat: '"9.99"'
      price_oro: 500
      price_plumas: 100
      active: 1
      product_parent_id: 1
      oro: 1000
      plumas: 200
      nft_id: 5
      rarity: '"Legendary"'
      tags: '"gold,premium"'
      nft_serial_greater_equal: 1
      nft_serial_less_equal: 100
      custom: '"Pase de temporada premium"'
      one_time_purchase: 1
      one_time_purchase_global: 0
    fileParameters: []
    responses: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - DELETE
    uri: 'api/{account}/manager/product/{id}'
    metadata:
      groupName: 'Product management'
      groupDescription: |-

        APIs for managing products
      subgroup: ''
      subgroupDescription: ''
      title: 'Remove the specified product.'
      description: 'Delete a product by ID.'
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      account:
        name: account
        description: ''
        required: true
        example: consequatur
        type: string
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
      id:
        name: id
        description: 'The ID of the product.'
        required: true
        example: consequatur
        type: string
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
    cleanUrlParameters:
      account: consequatur
      id: consequatur
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - DELETE
    uri: 'api/{account}/manager/product'
    metadata:
      groupName: 'Product management'
      groupDescription: |-

        APIs for managing products
      subgroup: ''
      subgroupDescription: ''
      title: 'Remove the specified product.'
      description: 'Delete a product by ID.'
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      account:
        name: account
        description: ''
        required: true
        example: consequatur
        type: string
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
    cleanUrlParameters:
      account: consequatur
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - GET
    uri: 'api/{account}/manager/product-download'
    metadata:
      groupName: 'Product management'
      groupDescription: |-

        APIs for managing products
      subgroup: ''
      subgroupDescription: ''
      title: 'Download products as CSV or JSON.'
      description: 'Export the product data in CSV or JSON format.'
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      account:
        name: account
        description: ''
        required: true
        example: consequatur
        type: string
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
    cleanUrlParameters:
      account: consequatur
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      type:
        name: type
        description: 'The file format to download (csv or json).'
        required: false
        example: '"csv"'
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      page:
        name: page
        description: 'The page number for pagination.'
        required: false
        example: 0
        type: integer
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      limit:
        name: limit
        description: 'The number of items per page (1-100).'
        required: false
        example: 10
        type: integer
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      filter:
        name: filter
        description: 'Filter products by name.'
        required: false
        example: '"Gold"'
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      sorting:
        name: sorting
        description: 'Sort products by column and direction (column:direction).'
        required: false
        example: '"created_at:desc"'
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      parent_id:
        name: parent_id
        description: 'Filter products by parent ID.'
        required: false
        example: 1
        type: integer
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanBodyParameters:
      type: '"csv"'
      page: 0
      limit: 10
      filter: '"Gold"'
      sorting: '"created_at:desc"'
      parent_id: 1
    fileParameters: []
    responses:
      -
        status: 401
        content: '{"message":"Unauthenticated."}'
        headers:
          cache-control: 'no-cache, private'
          content-type: application/json
          vary: Origin
        description: null
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - GET
    uri: 'api/{account}/manager/product-fields'
    metadata:
      groupName: 'Product management'
      groupDescription: |-

        APIs for managing products
      subgroup: ''
      subgroupDescription: ''
      title: 'List the fields of the Product model.'
      description: 'Get the structure and field types of the Product model.'
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      account:
        name: account
        description: ''
        required: true
        example: consequatur
        type: string
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
    cleanUrlParameters:
      account: consequatur
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 401
        content: '{"message":"Unauthenticated."}'
        headers:
          cache-control: 'no-cache, private'
          content-type: application/json
          vary: Origin
        description: null
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: 'api/{account}/manager/product-upload'
    metadata:
      groupName: 'Product management'
      groupDescription: |-

        APIs for managing products
      subgroup: ''
      subgroupDescription: ''
      title: 'Upload a CSV file for bulk Product processing.'
      description: 'Upload a CSV file to create multiple Products at once.'
      authenticated: false
      custom: []
    headers:
      Content-Type: multipart/form-data
      Accept: application/json
    urlParameters:
      account:
        name: account
        description: ''
        required: true
        example: consequatur
        type: string
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
    cleanUrlParameters:
      account: consequatur
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      file:
        name: file
        description: 'The CSV file to upload (max 1MB). Must be a CSV file.'
        required: true
        example: null
        type: file
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
      header_mapping:
        name: header_mapping
        description: 'Array of headers mapping to Product fields.'
        required: true
        example:
          - consequatur
        type: 'string[]'
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
    cleanBodyParameters:
      header_mapping:
        - consequatur
    fileParameters:
      file: null
    responses: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - GET
    uri: 'api/{account}/manager/product-upload'
    metadata:
      groupName: 'Product management'
      groupDescription: |-

        APIs for managing products
      subgroup: ''
      subgroupDescription: ''
      title: 'Get the status of a bulk Product upload.'
      description: 'Check the progress of a previously submitted bulk upload.'
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      account:
        name: account
        description: ''
        required: true
        example: consequatur
        type: string
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
    cleanUrlParameters:
      account: consequatur
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 401
        content: '{"message":"Unauthenticated."}'
        headers:
          cache-control: 'no-cache, private'
          content-type: application/json
          vary: Origin
        description: null
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - DELETE
    uri: 'api/{account}/manager/product-upload/{id}'
    metadata:
      groupName: 'Product management'
      groupDescription: |-

        APIs for managing products
      subgroup: ''
      subgroupDescription: ''
      title: 'Delete a bulk Product upload.'
      description: 'Remove a pending or processing bulk upload.'
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      account:
        name: account
        description: ''
        required: true
        example: consequatur
        type: string
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
      id:
        name: id
        description: 'The ID of the product upload.'
        required: true
        example: consequatur
        type: string
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
    cleanUrlParameters:
      account: consequatur
      id: consequatur
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - GET
    uri: 'api/{account}/store/details'
    metadata:
      groupName: 'Product management'
      groupDescription: |-

        APIs for managing products
      subgroup: ''
      subgroupDescription: ''
      title: ''
      description: ''
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      account:
        name: account
        description: ''
        required: true
        example: consequatur
        type: string
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
    cleanUrlParameters:
      account: consequatur
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 401
        content: '{"message":"Unauthenticated."}'
        headers:
          cache-control: 'no-cache, private'
          content-type: application/json
          vary: Origin
        description: null
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: 'api/{account}/store/addProductToOrder'
    metadata:
      groupName: 'Product management'
      groupDescription: |-

        APIs for managing products
      subgroup: ''
      subgroupDescription: ''
      title: ''
      description: ''
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      account:
        name: account
        description: ''
        required: true
        example: consequatur
        type: string
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
    cleanUrlParameters:
      account: consequatur
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      product_id:
        name: product_id
        description: ''
        required: true
        example: consequatur
        type: string
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
    cleanBodyParameters:
      product_id: consequatur
    fileParameters: []
    responses: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: 'api/{account}/store/addEventGiftToOrder'
    metadata:
      groupName: 'Product management'
      groupDescription: |-

        APIs for managing products
      subgroup: ''
      subgroupDescription: ''
      title: ''
      description: ''
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      account:
        name: account
        description: ''
        required: true
        example: consequatur
        type: string
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
    cleanUrlParameters:
      account: consequatur
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      event_id:
        name: event_id
        description: ''
        required: true
        example: consequatur
        type: string
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
    cleanBodyParameters:
      event_id: consequatur
    fileParameters: []
    responses: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - GET
    uri: 'api/{account}/store/getLastProductOrders'
    metadata:
      groupName: 'Product management'
      groupDescription: |-

        APIs for managing products
      subgroup: ''
      subgroupDescription: ''
      title: ''
      description: ''
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      account:
        name: account
        description: ''
        required: true
        example: consequatur
        type: string
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
    cleanUrlParameters:
      account: consequatur
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 401
        content: '{"message":"Unauthenticated."}'
        headers:
          cache-control: 'no-cache, private'
          content-type: application/json
          vary: Origin
        description: null
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
