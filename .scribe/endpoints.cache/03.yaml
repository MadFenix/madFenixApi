## Autogenerated by Scribe. DO NOT MODIFY.

name: 'Rankings season management'
description: |-

  APIs for managing rankings seasons
endpoints:
  -
    httpMethods:
      - GET
    uri: 'api/{account}/ranking/getSeasonClassificationPerTime'
    metadata:
      groupName: 'Rankings season management'
      groupDescription: |-

        APIs for managing rankings seasons
      subgroup: ''
      subgroupDescription: ''
      title: 'Get season game time-based classification/leaderboard.'
      description: 'Retrieve the top 10 players and their times for a specific game in the current season.'
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      account:
        name: account
        description: ''
        required: true
        example: consequatur
        type: string
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
    cleanUrlParameters:
      account: consequatur
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      game:
        name: game
        description: 'The name of the game to get classification for.'
        required: true
        example: '"NameOfGame"'
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanBodyParameters:
      game: '"NameOfGame"'
    fileParameters: []
    responses:
      -
        status: 500
        content: '"Error al establecer la clasificaci\u00f3n"'
        headers:
          cache-control: 'no-cache, private'
          content-type: application/json
          cross-origin-opener-policy: same-origin
          cross-origin-embedder-policy: require-corp
          x-ratelimit-limit: '60'
          x-ratelimit-remaining: '50'
          vary: Origin
        description: null
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - GET
    uri: 'api/{account}/ranking/getSeasonClassificationPerPoints'
    metadata:
      groupName: 'Rankings season management'
      groupDescription: |-

        APIs for managing rankings seasons
      subgroup: ''
      subgroupDescription: ''
      title: 'Get season game points-based classification/leaderboard.'
      description: 'Retrieve the top 10 players and their points for a specific game in the current season.'
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      account:
        name: account
        description: ''
        required: true
        example: consequatur
        type: string
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
    cleanUrlParameters:
      account: consequatur
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      game:
        name: game
        description: 'The name of the game to get classification for.'
        required: true
        example: '"NameOfGame"'
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanBodyParameters:
      game: '"NameOfGame"'
    fileParameters: []
    responses:
      -
        status: 500
        content: '"Error al establecer la clasificaci\u00f3n"'
        headers:
          cache-control: 'no-cache, private'
          content-type: application/json
          cross-origin-opener-policy: same-origin
          cross-origin-embedder-policy: require-corp
          x-ratelimit-limit: '60'
          x-ratelimit-remaining: '49'
          vary: Origin
        description: null
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - GET
    uri: 'api/{account}/ranking/getSeasonGameStarted'
    metadata:
      groupName: 'Rankings season management'
      groupDescription: |-

        APIs for managing rankings seasons
      subgroup: ''
      subgroupDescription: ''
      title: 'Check if a season game has been started.'
      description: 'Determine if a specific game has been initialized or started in the current season.'
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      account:
        name: account
        description: ''
        required: true
        example: consequatur
        type: string
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
    cleanUrlParameters:
      account: consequatur
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      game:
        name: game
        description: 'The name of the game to check.'
        required: true
        example: '"NameOfGame"'
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanBodyParameters:
      game: '"NameOfGame"'
    fileParameters: []
    responses:
      -
        status: 200
        content: '"No iniciado."'
        headers:
          cache-control: 'no-cache, private'
          content-type: application/json
          cross-origin-opener-policy: same-origin
          cross-origin-embedder-policy: require-corp
          x-ratelimit-limit: '60'
          x-ratelimit-remaining: '48'
          vary: Origin
        description: null
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: 'api/{account}/ranking/addSeasonRanking'
    metadata:
      groupName: 'Rankings season management'
      groupDescription: |-

        APIs for managing rankings seasons
      subgroup: ''
      subgroupDescription: ''
      title: 'Add a new season ranking entry.'
      description: 'Record a new ranking entry for the current user in a specific game for the current season.'
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      account:
        name: account
        description: ''
        required: true
        example: consequatur
        type: string
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
    cleanUrlParameters:
      account: consequatur
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      game:
        name: game
        description: 'The name of the game.'
        required: true
        example: '"NameOfGame"'
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      network_group:
        name: network_group
        description: 'The network group identifier.'
        required: false
        example: '"Group1"'
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      fase:
        name: fase
        description: 'The phase or level of the game.'
        required: false
        example: 1
        type: integer
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      points:
        name: points
        description: 'The points scored in the game.'
        required: false
        example: 1000
        type: integer
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanBodyParameters:
      game: '"NameOfGame"'
      network_group: '"Group1"'
      fase: 1
      points: 1000
    fileParameters: []
    responses: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - GET
    uri: 'api/{account}/ranking/getSeasonRankingPerTime'
    metadata:
      groupName: 'Rankings season management'
      groupDescription: |-

        APIs for managing rankings seasons
      subgroup: ''
      subgroupDescription: ''
      title: "Get user's best time-based ranking for a game."
      description: 'Retrieve the best time for the current user in a specific game.'
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      account:
        name: account
        description: ''
        required: true
        example: consequatur
        type: string
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
    cleanUrlParameters:
      account: consequatur
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      game:
        name: game
        description: 'The name of the game to get ranking for.'
        required: true
        example: '"NameOfGame"'
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanBodyParameters:
      game: '"NameOfGame"'
    fileParameters: []
    responses:
      -
        status: 401
        content: '{"message":"Unauthenticated."}'
        headers:
          cache-control: 'no-cache, private'
          content-type: application/json
          vary: Origin
        description: null
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - GET
    uri: 'api/{account}/ranking/getSeasonRankingPerPoints'
    metadata:
      groupName: 'Rankings season management'
      groupDescription: |-

        APIs for managing rankings seasons
      subgroup: ''
      subgroupDescription: ''
      title: "Get user's best points-based ranking for a game."
      description: 'Retrieve the best points score for the current user in a specific game.'
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      account:
        name: account
        description: ''
        required: true
        example: consequatur
        type: string
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
    cleanUrlParameters:
      account: consequatur
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      game:
        name: game
        description: 'The name of the game to get ranking for.'
        required: true
        example: '"NameOfGame"'
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanBodyParameters:
      game: '"NameOfGame"'
    fileParameters: []
    responses:
      -
        status: 401
        content: '{"message":"Unauthenticated."}'
        headers:
          cache-control: 'no-cache, private'
          content-type: application/json
          vary: Origin
        description: null
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - GET
    uri: 'api/{account}/ranking/getSeasonUserClassificationPerTime'
    metadata:
      groupName: 'Rankings season management'
      groupDescription: |-

        APIs for managing rankings seasons
      subgroup: ''
      subgroupDescription: ''
      title: "Get user's time-based classification/leaderboard."
      description: "Retrieve the user's personal time-based leaderboard and any tournament leaderboards they're part of."
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      account:
        name: account
        description: ''
        required: true
        example: consequatur
        type: string
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
    cleanUrlParameters:
      account: consequatur
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      game:
        name: game
        description: 'The name of the game to get classification for.'
        required: true
        example: '"NameOfGame"'
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanBodyParameters:
      game: '"NameOfGame"'
    fileParameters: []
    responses:
      -
        status: 401
        content: '{"message":"Unauthenticated."}'
        headers:
          cache-control: 'no-cache, private'
          content-type: application/json
          vary: Origin
        description: null
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - GET
    uri: 'api/{account}/ranking/getSeasonUserClassificationPerPoints'
    metadata:
      groupName: 'Rankings season management'
      groupDescription: |-

        APIs for managing rankings seasons
      subgroup: ''
      subgroupDescription: ''
      title: "Get user's points-based classification/leaderboard."
      description: "Retrieve the user's personal points-based leaderboard and any tournament leaderboards they're part of."
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      account:
        name: account
        description: ''
        required: true
        example: consequatur
        type: string
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
    cleanUrlParameters:
      account: consequatur
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      game:
        name: game
        description: 'The name of the game to get classification for.'
        required: true
        example: '"NameOfGame"'
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanBodyParameters:
      game: '"NameOfGame"'
    fileParameters: []
    responses:
      -
        status: 401
        content: '{"message":"Unauthenticated."}'
        headers:
          cache-control: 'no-cache, private'
          content-type: application/json
          vary: Origin
        description: null
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
